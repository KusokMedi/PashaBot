from telebot import TeleBot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
import random
from lines import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
from typing import Optional

def register_handlers(bot: TeleBot):
    # –ö–æ–º–∞–Ω–¥–∞ /start
    @bot.message_handler(commands=['start'])
    def cmd_start(message: Message):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton(BTN_TTS), KeyboardButton(BTN_QUOTES))
        keyboard.add(KeyboardButton(BTN_RANDOM), KeyboardButton(BTN_DAILY))
        keyboard.add(KeyboardButton(BTN_HELP))
        
        bot.reply_to(message, MSG_START, reply_markup=keyboard)

    # –ö–æ–º–∞–Ω–¥–∞ /help
    @bot.message_handler(commands=['help'])
    def cmd_help(message: Message):
        bot.reply_to(message, MSG_HELP)
    from gtts import gTTS
    import os
    import tempfile
    
    # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_langs = {}  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    def create_voice_message(text: str, lang: str = 'ru') -> Optional[str]:
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                tts = gTTS(text=text, lang=lang)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                tts.save(tmp_file.name)
                return tmp_file.name
        except Exception as e:
            print(f"TTS Error: {e}")
            return None
            return None
    
    # –ö–æ–º–∞–Ω–¥–∞ TTS
    @bot.message_handler(commands=['tts'])
    def cmd_tts(message: Message):
        if not message or not message.from_user:
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton(BTN_CANCEL))
            
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
        msg = bot.reply_to(message, MSG_TTS_PROMPT, reply_markup=keyboard)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(msg, process_tts_text)
        
    def process_tts_text(message: Message):
        if not message or not message.text or not message.from_user:
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"
        if message.text == BTN_CANCEL:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton(BTN_TTS), KeyboardButton(BTN_QUOTES))
            keyboard.add(KeyboardButton(BTN_RANDOM), KeyboardButton(BTN_DAILY))
            keyboard.add(KeyboardButton(BTN_HELP))
            bot.reply_to(message, MSG_CANCELLED, reply_markup=keyboard)
            return
            
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if len(text) > 1000:
            bot.reply_to(message, MSG_TTS_TOO_LONG)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        lang_code, _ = TTS_LANGS.get(
            user_langs.get(message.from_user.id, 1),  # 1 = —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            ('ru', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π')
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton(BTN_TTS), KeyboardButton(BTN_QUOTES))
        keyboard.add(KeyboardButton(BTN_RANDOM), KeyboardButton(BTN_DAILY))
        keyboard.add(KeyboardButton(BTN_HELP))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        bot.reply_to(message, MSG_TTS_PROCESSING, reply_markup=keyboard)
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = create_voice_message(text, lang_code)
        
        if voice_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            with open(voice_file, 'rb') as audio:
                bot.send_voice(message.chat.id, audio)
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(voice_file)
        else:
            bot.reply_to(message, MSG_TTS_ERROR)

    # –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –æ–∑–≤—É—á–∫–∏
    @bot.message_handler(commands=['voice'])
    def cmd_voice(message: Message):
        if not message or not message.text or not message.from_user:
            bot.reply_to(message, MSG_VOICE_MENU)
            return
            
        command_args = message.text.split()
        if len(command_args) == 1:
            # –ü—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /voice –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            current_lang_num = user_langs.get(message.from_user.id, 1)
            _, current_lang_name = TTS_LANGS.get(current_lang_num, ('ru', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'))
            bot.reply_to(message, MSG_VOICE_CURRENT.format(current_lang_name))
            bot.reply_to(message, MSG_VOICE_MENU)
        else:
            try:
                lang_number = int(command_args[1])
                if 1 <= lang_number <= 6:
                    _, lang_name = TTS_LANGS[lang_number]
                    user_langs[message.from_user.id] = lang_number
                    bot.reply_to(message, MSG_VOICE_SELECTED.format(lang_name))
                else:
                    bot.reply_to(message, MSG_VOICE_ERROR)
            except ValueError:
                bot.reply_to(message, MSG_VOICE_ERROR)

    # –ö–æ–º–∞–Ω–¥—ã —Ü–∏—Ç–∞—Ç–Ω–∏–∫–∞
    @bot.message_handler(commands=['quote'])
    def cmd_quote(message: Message):
        if not message or not message.text:
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /quote")
            return
            
        command_args = message.text.split(maxsplit=1)
        if len(command_args) > 1:
            text = command_args[1]
            bot.reply_to(message, "üìù –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        else:
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /quote")

    @bot.message_handler(commands=['random_quote'])
    def cmd_random_quote(message: Message):
        bot.reply_to(message, "üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –±–∞–∑—ã...")

    # –ö–æ–º–∞–Ω–¥—ã —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
    @bot.message_handler(commands=['random'])
    def cmd_random(message: Message):
        if not message or not message.text:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /random [–º–∏–Ω] [–º–∞–∫—Å]")
            return
            
        try:
            command_args = message.text.split()
            if len(command_args) == 3:  # /random + 2 —á–∏—Å–ª–∞
                min_val = int(command_args[1])
                max_val = int(command_args[2])
                result = random.randint(min_val, max_val)
                bot.reply_to(message, f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {result}")
            else:
                bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /random [–º–∏–Ω] [–º–∞–∫—Å]")
        except ValueError:
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –£–∫–∞–∂–∏—Ç–µ –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞: /random [–º–∏–Ω] [–º–∞–∫—Å]")

    @bot.message_handler(commands=['choice'])
    def cmd_choice(message: Message):
        if not message or not message.text:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /choice –≤–∞—Ä1, –≤–∞—Ä2, –≤–∞—Ä3")
            return
            
        command_args = message.text.split(maxsplit=1)
        if len(command_args) > 1:
            options = command_args[1]
            items = [x.strip() for x in options.split(',')]
            if len(items) > 1:
                choice = random.choice(items)
                bot.reply_to(message, f"üé≤ –Ø –≤—ã–±–∏—Ä–∞—é: {choice}")
            else:
                bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        else:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /choice –≤–∞—Ä1, –≤–∞—Ä2, –≤–∞—Ä3")

    @bot.message_handler(commands=['coin'])
    def cmd_coin(message: Message):
        result = random.choice([MSG_COIN_HEADS, MSG_COIN_TAILS])
        bot.reply_to(message, result)

    # –ö–æ–º–∞–Ω–¥–∞ —Å–æ–≤–µ—Ç–∞ –¥–Ω—è
    @bot.message_handler(commands=['daily'])
    def cmd_daily(message: Message):
        bot.reply_to(message, "üìÖ –°–æ–≤–µ—Ç –¥–Ω—è...")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @bot.message_handler(content_types=['text'])
    def handle_text(message: Message):
        if message.text == BTN_TTS:
            bot.reply_to(message, MSG_TTS_INFO)
        elif message.text == BTN_QUOTES:
            bot.reply_to(message, MSG_QUOTE_INFO)
        elif message.text == BTN_RANDOM:
            bot.reply_to(message, MSG_RANDOM_INFO)
        elif message.text == BTN_DAILY:
            bot.reply_to(message, MSG_DAILY_INFO)
        elif message.text == BTN_HELP:
            bot.send_message(message.chat.id, MSG_HELP)