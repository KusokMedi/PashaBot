from telebot import TeleBot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
import random
import os
from lines import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
from typing import Optional
from quotes import QuoteManager
from quote_image import QuoteImage

def register_handlers(bot: TeleBot):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    quote_manager = QuoteManager()
    quote_image = QuoteImage()
    
    # –ö–æ–º–∞–Ω–¥–∞ /start
    @bot.message_handler(commands=['start'])
    def cmd_start(message: Message):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton(BTN_TTS), KeyboardButton(BTN_QUOTES))
        keyboard.add(KeyboardButton(BTN_RANDOM), KeyboardButton(BTN_DAILY))
        keyboard.add(KeyboardButton(BTN_HELP))
        
        bot.reply_to(message, MSG_START, reply_markup=keyboard)

    # –ö–æ–º–∞–Ω–¥–∞ /help
    @bot.message_handler(commands=['help'])
    def cmd_help(message: Message):
        bot.reply_to(message, MSG_HELP)
    from gtts import gTTS
    import os
    import tempfile
    
    # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_langs = {}  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    def create_voice_message(text: str, lang: str = 'ru') -> Optional[str]:
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                tts = gTTS(text=text, lang=lang)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                tts.save(tmp_file.name)
                return tmp_file.name
        except Exception as e:
            print(f"TTS Error: {e}")
            return None
            return None
    
    # –ö–æ–º–∞–Ω–¥–∞ TTS
    @bot.message_handler(commands=['tts'])
    def cmd_tts(message: Message):
        if not message or not message.from_user:
            return
            
        command_args = message.text.split(maxsplit=1)
        if len(command_args) > 1:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∫–∞–∑–∞–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            process_tts_text(message, command_args[1])
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton(BTN_CANCEL))
                
            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
            msg = bot.reply_to(message, MSG_TTS_PROMPT, reply_markup=keyboard)
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            bot.register_next_step_handler(msg, lambda m: process_tts_text(m))
        
    def process_tts_text(message: Message, direct_text: str = None):
        if not message or not message.text or not message.from_user:
            return
            
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = direct_text if direct_text else message.text
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞" –∏ —Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
        if not direct_text and text == BTN_CANCEL:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton(BTN_TTS), KeyboardButton(BTN_QUOTES))
            keyboard.add(KeyboardButton(BTN_RANDOM), KeyboardButton(BTN_DAILY))
            keyboard.add(KeyboardButton(BTN_HELP))
            bot.reply_to(message, MSG_CANCELLED, reply_markup=keyboard)
            return        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if len(text) > 1000:
            bot.reply_to(message, MSG_TTS_TOO_LONG)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        lang_code, _ = TTS_LANGS.get(
            user_langs.get(message.from_user.id, 1),  # 1 = —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            ('ru', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π')
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton(BTN_TTS), KeyboardButton(BTN_QUOTES))
        keyboard.add(KeyboardButton(BTN_RANDOM), KeyboardButton(BTN_DAILY))
        keyboard.add(KeyboardButton(BTN_HELP))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        bot.reply_to(message, MSG_TTS_PROCESSING, reply_markup=keyboard)
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = create_voice_message(text, lang_code)
        
        if voice_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            with open(voice_file, 'rb') as audio:
                bot.send_voice(message.chat.id, audio)
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(voice_file)
        else:
            bot.reply_to(message, MSG_TTS_ERROR)

    # –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –æ–∑–≤—É—á–∫–∏
    @bot.message_handler(commands=['voice'])
    def cmd_voice(message: Message):
        if not message or not message.from_user:
            return
            
        command_args = message.text.split()
        if len(command_args) > 1:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —è–∑—ã–∫–∞ —É–∫–∞–∑–∞–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            process_voice_selection(message, command_args[1])
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–∑—ã–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —è–∑—ã–∫–∞–º–∏
            for num, (_, lang_name) in TTS_LANGS.items():
                keyboard.add(KeyboardButton(f"{num}. {lang_name}"))
            keyboard.add(KeyboardButton(BTN_CANCEL))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            current_lang_num = user_langs.get(message.from_user.id, 1)
            _, current_lang_name = TTS_LANGS.get(current_lang_num, ('ru', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'))
            msg = bot.reply_to(message, 
                             f"{MSG_VOICE_CURRENT.format(current_lang_name)}\n\n{MSG_VOICE_MENU}", 
                             reply_markup=keyboard)
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            bot.register_next_step_handler(msg, process_voice_selection)
            
    def process_voice_selection(message: Message, direct_input: str = None):
        if not message or not message.from_user:
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞" –∏ –≤—ã–±–æ—Ä –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
        if not direct_input and message.text == BTN_CANCEL:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton(BTN_TTS), KeyboardButton(BTN_QUOTES))
            keyboard.add(KeyboardButton(BTN_RANDOM), KeyboardButton(BTN_DAILY))
            keyboard.add(KeyboardButton(BTN_HELP))
            bot.reply_to(message, MSG_CANCELLED, reply_markup=keyboard)
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —è–∑—ã–∫–∞
            text = direct_input if direct_input else message.text
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "1. –†—É—Å—Å–∫–∏–π")
            lang_number = int(''.join(filter(str.isdigit, text.split('.')[0])))
            
            if 1 <= lang_number <= len(TTS_LANGS):
                _, lang_name = TTS_LANGS[lang_number]
                user_langs[message.from_user.id] = lang_number
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(KeyboardButton(BTN_TTS), KeyboardButton(BTN_QUOTES))
                keyboard.add(KeyboardButton(BTN_RANDOM), KeyboardButton(BTN_DAILY))
                keyboard.add(KeyboardButton(BTN_HELP))
                
                bot.reply_to(message, MSG_VOICE_SELECTED.format(lang_name), reply_markup=keyboard)
            else:
                bot.reply_to(message, MSG_VOICE_ERROR)
        except (ValueError, IndexError):
            bot.reply_to(message, MSG_VOICE_ERROR)

    # –ö–æ–º–∞–Ω–¥—ã —Ü–∏—Ç–∞—Ç–Ω–∏–∫–∞
    @bot.message_handler(commands=['quote'])
    def cmd_quote(message: Message):
        if not message or not message.text:
            bot.reply_to(message, MSG_QUOTE_PROMPT)
            return
            
        command_args = message.text.split(maxsplit=1)
        if len(command_args) > 1:
            text = command_args[1]
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            author = None
            user_id = None
            if message.reply_to_message and message.reply_to_message.from_user:
                author = message.reply_to_message.from_user.first_name
                user_id = message.reply_to_message.from_user.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É
            if quote_manager.add_quote(text, author, message.message_id, message.chat.id):
                bot.reply_to(message, MSG_QUOTE_SAVED)
                
                # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π
                quote_img = quote_image.create_quote_image(text, author, user_id)
                if quote_img and os.path.exists(quote_img):
                    with open(quote_img, 'rb') as img:
                        bot.send_photo(message.chat.id, img)
                    os.remove(quote_img)
            else:
                bot.reply_to(message, MSG_QUOTE_ERROR)
        else:
            bot.reply_to(message, MSG_QUOTE_PROMPT)

    @bot.message_handler(commands=['random_quote'])
    def cmd_random_quote(message: Message):
        quote = quote_manager.get_random_quote()
        if quote:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ü–∏—Ç–∞—Ç—ã
            text = quote['text']
            author = quote.get('author')
            user_id = quote.get('user_id')
            user_pic = quote.get('user_pic')
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç–æ–π
            quote_img = quote_image.create_quote_image(
                text, 
                author, 
                user_id=user_id, 
                user_pic_path=user_pic
            )
            
            if quote_img and os.path.exists(quote_img):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø–æ–¥–ø–∏—Å—å
                caption = f"{MSG_QUOTE_RANDOM}\n\n–í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: {quote_manager.get_quotes_count()}"
                if author:
                    author_quotes = quote_manager.get_quotes_by_author(author)
                    caption += f"\n–¶–∏—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∞ {author}: {len(author_quotes)}"
                
                with open(quote_img, 'rb') as img:
                    bot.send_photo(message.chat.id, img, caption=caption)
                os.remove(quote_img)
        else:
            bot.reply_to(message, MSG_QUOTE_EMPTY)

    # –ö–æ–º–∞–Ω–¥—ã —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
    @bot.message_handler(commands=['random'])
    def cmd_random(message: Message):
        if not message or not message.text:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /random [–º–∏–Ω] [–º–∞–∫—Å]")
            return
            
        try:
            command_args = message.text.split()
            if len(command_args) == 3:  # /random + 2 —á–∏—Å–ª–∞
                min_val = int(command_args[1])
                max_val = int(command_args[2])
                result = random.randint(min_val, max_val)
                bot.reply_to(message, f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {result}")
            else:
                bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /random [–º–∏–Ω] [–º–∞–∫—Å]")
        except ValueError:
            bot.reply_to(message, "–û—à–∏–±–∫–∞! –£–∫–∞–∂–∏—Ç–µ –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞: /random [–º–∏–Ω] [–º–∞–∫—Å]")

    @bot.message_handler(commands=['choice'])
    def cmd_choice(message: Message):
        if not message or not message.text:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /choice –≤–∞—Ä1, –≤–∞—Ä2, –≤–∞—Ä3")
            return
            
        command_args = message.text.split(maxsplit=1)
        if len(command_args) > 1:
            options = command_args[1]
            items = [x.strip() for x in options.split(',')]
            if len(items) > 1:
                choice = random.choice(items)
                bot.reply_to(message, f"üé≤ –Ø –≤—ã–±–∏—Ä–∞—é: {choice}")
            else:
                bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        else:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /choice –≤–∞—Ä1, –≤–∞—Ä2, –≤–∞—Ä3")

    @bot.message_handler(commands=['coin'])
    def cmd_coin(message: Message):
        result = random.choice([MSG_COIN_HEADS, MSG_COIN_TAILS])
        bot.reply_to(message, result)

    # –ö–æ–º–∞–Ω–¥–∞ —Å–æ–≤–µ—Ç–∞ –¥–Ω—è
    @bot.message_handler(commands=['daily'])
    def cmd_daily(message: Message):
        bot.reply_to(message, "üìÖ –°–æ–≤–µ—Ç –¥–Ω—è...")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–≤–µ—Ç "—Ü–∏—Ç–∞—Ç–∞"
    @bot.message_handler(func=lambda message: message.reply_to_message is not None and 
                        message.text and message.text.lower() in ['—Ü–∏—Ç–∞—Ç–∞', 'quote', '—Ü—ã—Ç–∞—Ç–∞'])
    def handle_quote_reply(message: Message):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        original_msg = message.reply_to_message
        if not original_msg.text:
            bot.reply_to(message, MSG_QUOTE_NO_TEXT)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –µ–≥–æ id
        author = None
        user_id = None
        if original_msg.from_user:
            author = original_msg.from_user.first_name
            user_id = original_msg.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É
        if quote_manager.add_quote(original_msg.text, author, original_msg.message_id, message.chat.id):
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π
            quote_img = quote_image.create_quote_image(original_msg.text, author, user_id)
            if quote_img and os.path.exists(quote_img):
                with open(quote_img, 'rb') as img:
                    bot.send_photo(message.chat.id, img)
                os.remove(quote_img)
            bot.reply_to(message, MSG_QUOTE_SAVED)
        else:
            bot.reply_to(message, MSG_QUOTE_ERROR)
    
    @bot.message_handler(content_types=['text'])
    def handle_text(message: Message):
        if message.text == BTN_TTS:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton(BTN_CANCEL))
                
            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
            msg = bot.reply_to(message, MSG_TTS_PROMPT, reply_markup=keyboard)
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            bot.register_next_step_handler(msg, lambda m: process_tts_text(m))
        elif message.text == BTN_QUOTES:
            bot.reply_to(message, MSG_QUOTE_INFO)
        elif message.text == BTN_RANDOM:
            bot.reply_to(message, MSG_RANDOM_INFO)
        elif message.text == BTN_DAILY:
            bot.reply_to(message, MSG_DAILY_INFO)
        elif message.text == BTN_HELP:
            bot.send_message(message.chat.id, MSG_HELP)